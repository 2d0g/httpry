       _     _   _
      | |   | | | |
      | |__ | |_| |_ _ __  _ __ _   _
      | '_ \| __| __| '_ \| '__| | | |
      | | | | |_| |_| |_) | |  | |_| |
      |_| |_|\__|\__| .__/|_|   \__, |
                    | |          __/ |
                    |_|         |___/

         -||-  httpry 0.1.0  -||-

  HTTP logging and information display tool
    Jason Bittel <jason.bittel@gmail.com>



--{ ABOUT }--

httpry is a tool designed for displaying and logging HTTP traffic. It is not
intended to perform analysis itself, but instead to capture, parse and/or
log the traffic for later analysis. It can be run in real-time displaying
the traffic as it is parsed, or as a daemon process that logs to an output
file. It is written to be as lightweight and flexible as possible, so that
it can be easily adaptable to different applications. Currently it does not
display the raw HTTP data transferred, but instead focuses on parsing and
displaying the request/response line along with associated header fields.

"How is this tool useful?" you may ask next. Well, here's a few ideas that
have occurred to me:

 - See what users on your network are requesting online
 - Check for proper server configuration (or improper, as the case may be)
 - Research patterns in HTTP usage
 - Watch for dangerous downloaded files
 - Verify the enforcement of HTTP policy on your network
 - Simple curiosity
 - It's just plain fun to watch in realtime

In addition to the core program, there are several Perl scripts included
for processing httpry log files. They should be useful for a number of
generic situations, and can also serve as a useful starting point for your
own log parsing toolset. More information about them can be found in the
doc/perl-tools file.


--{ INSTALLATION }--

Simply run these commands in the base httpry directory:

 $ make
 # make install

which will compile the program and copy the binary and man page to their
appropriate locations. If you every need to uninstall the program run:

 # make uninstall

from the installation directory, or manually delete the executable and
man page.


--{ USAGE }--

Running the program with the -h switch will print out an abbreviated
description of the available options. However, that switch is meant for
quick reference and not complete documentation of program behavior. This
section describes these options in greater detail.

httpry [-dhp] [-f filter] [-i device] [-n count]
       [-o file] [-r file] [-s format] [-u user]

-d
Run the program as a daemon process. All program status output
will be sent to the syslog. A pid file is created for the process in
/var/run/httpry.pid by default. Requires an output file.

-f filter
Specify a libpcap style capture filter. This is useful for narrowing
the traffic further than the default capture filter (or perhaps even
broadening the filter depending on the situation).

-h
Display a brief description of these options.

-i device
Specify an ethernet interface for the program to listen on. This is optional;
by default the program will poll the system for a list of interfaces and
select the first one that it finds.

-n count
Parse this many HTTP packets and then exit. Defaults to 0, which means loop
forever.

-o file
Specify an output file for writing parsed packet data.

-p
Do not put the NIC in promiscuous mode on startup. Note that the NIC could
already be in that mode for another reason.

-r file
Provide an input capture file to read from instead of performing
a live capture. This option does not require root priviledges.

-s string
Specify a comma-delimited string that defines the parsed HTTP data to output.
See the doc/format-string file for further information about the options and
syntax.

-u user
Specify an alternate user to take ownership of the process and any output
files. Note that you still need root privileges if you are performing a live
capture; it will switch to the new user after initialization.
