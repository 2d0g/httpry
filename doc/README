      _     _   _
     | |   | | | |
     | |__ | |_| |_ _ __  _ __ _   _
     | '_ \| __| __| '_ \| '__| | | |
     | | | | |_| |_| |_) | |  | |_| |
     |_| |_|\__|\__| .__/|_|   \__, |
                   | |          __/ |
                   |_|         |___/

        -||-  HTTPry 0.0.7  -||-

  HTTP logging and information display tool
      Jason Bittel <jbittel@corban.edu>


----------------------
I. ABOUT
----------------------

httpry is a tool designed for displaying and logging HTTP traffic. It is not
intended to perform analysis itself, but instead to capture, parse and/or log
the traffic for later analysis. It can be run in real-time displaying the
traffic as it is parsed, or as a daemon process that logs to an output file. It
is written to be as lightweight and flexible as possible, so that it can be
easily adaptable to different applications.

"How is this tool useful?" you may ask. Well, here's a few ideas that have
occurred to me:

 - Seeing what users on your network are looking at
 - Checking for proper server configuration (or improper, as the case may be)
 - Researching patterns in HTTP usage
 - Checking for dangerous downloaded files
 - Verifying the enforcement of HTTP policy on your network
 - Simple curiosity
 - It's just plain fun to watch in realtime

Of course, I hope that others will find additional uses for the tool beyond
what I've imagined. One might also note that, merely capturing and logging the
data is only the first step; the ability to effectively process the resulting
logs is what makes the information truly useful. To that end I've included
several Perl scripts that are post-processors for the log files. They are
relatively generic examples for various aspects of parsing and analyzing the
log files. Hopefully they will be of use for developing your own log parsing
toolset.


----------------------
II. INSTALLATION
----------------------

I was hoping you'd ask! Installing httpry is as simple as:

 $ make
 # make install

These commands will compile the latest version of the code and then install it
appropriately in /usr/sbin. Along with httpry itself, there are several other
scripts included. These tools may either be useful as-is, or as a starting point
for your own log parsing tools. Additionally, there is an included rc.httpry
file for automatically starting the program under Linux. This file has only been
tested under Slackware Linux; your distro may handle things differently.
Finally, if you ever tire of httpry, simply run:

 # make uninstall

from your installation directory, or just manually delete the executable and man
page.


----------------------
III. USAGE
----------------------

Running the program with the -h switch will print out an abbreviated description
of the available options. However, this is merely an abbreviated description
meant for quick reference and not an understanding of program behavior. This
section describes these options in greater detail.

httpry [-dhpvx] [-b file] [-c count] [-f file] [-i interface] [-l filter]
       [-n count] [-o file] [-r dir] [-u user]

-b <file> :
Dumps a binary packet capture output file to the specified location. Note that
these are packets that pass both the pcap filter and are successfully parsed as
HTTP packets.

-c <file> :
Provides a configuration file to read settings from at initilization. These
settings can be overridden by command line arguments. See the included example
configuration file to see the available options and proper syntax.

-d :
Runs the program as a daemon process. All program status output will be
sent to the syslog. Additionally, there is a pid file created for the process in
/var/run/httpry.pid. Requires -o.

-f <file> :
Provide an input capture file to read from instead of performing a
live capture. The program expects a valid capture file as input. Note that this
does not require the program to be run as root, as no access to the NIC is
required.

-h :
Displays a brief description of these options, after which the program
terminates.

-i <interface> :
Specifies an ethernet interface for the program to listen on.
This is optional; by default the program will poll the system for a list of
interfaces and select the first one that it finds.

-l <filter> :
Allows the default capture filter to be overridden by a filter
that follows the tcpdump format. Useful for capturing traffic on non-standard
ports or to/from specific hosts.

-n <count> :
Specifies a number of packets to capture, following which the
program will terminate. Note that this is a count of total captured packets, not
of parsed HTTP packets.

-o <file> :
Provides an output file for writing parsed packet data. Note that if the
program is running as a daemon, its base directory is set to the filesystem
root (by default) so an absolute path to the output file should be specified.

-p :
Disables promiscuous mode on the NIC. Under most circumstances this should
not be required.

-r <dir> :
Allows a running directory to be specified when running in daemon mode. By
default this is set to '/', which should be adequate for most uses.

-u <user> :
Allows an alternate user to take ownership of the process. This is
particularly useful when running in daemon mode. Note that you still need root
privileges in order to run the program; it will switch to the alternate
credentials once initialization is complete.

-v :
Displays the program name and version number, after which the program
terminates.

-x :
Causes the output to include additional information in the output string
such as client/server port numbers, HTTP referer and HTTP user agent.


----------------------
IV. CHANGELOG
----------------------

version 0.0.7
   + Add: option to read settings from a config file (-c)
   = Chg: changed packet count switch from -c to -n
   - Fix: fixed bug in packet count check
   = Chg: cleaned up initialization routines in main()
   + Add: added config.h for setting compile time program defaults
   + Add: option to display extended packet information (-x)
   + Add: option to dump binary capture output file (-b)
   + Add: basic packet capture/parsing stats at program termination
   = Chg: program now compiles cleanly as strict ANSI C

version 0.0.6 (initial "official" release)
   + Add: ability to change process owner (-u)
   + Add: additional error checking when entering daemon mode
   = Chg: completely reworked output data handling
   = Chg: removed stdout suppression (-s) option
   = Chg: daemon mode (-d) now requires output file (-o)
   = Chg: error/log/warn message printing pushed into function macros
   - Fix: standardized error and status message strings
   + Add: ability to specify running directory (-r)
   - Fix: fixed an incorrect array initialisation
   = Chg: split version and help information into two commands (-v and -h)

All previous releases were internal pre-release builds


----------------------
V. FUTURE IDEAS
----------------------

These are ideas that have occurred to me while working on this project as
potential ways to improve or extend the code. I'm still not convinced all of
them are necessarily good ideas, but they are a source of inspiration and
consideration as I continue improving the project. A number indicates the
program version number I'm targeting to focus on that particular option.

* Internal packet queue to help with burst traffic
* Parent/worker threaded design
* Configurable output format string (.8)
* More extensive disassembly of the HTTP protocol (.8)
* Option to fallback on rDNS when Host: string unavailable
* HTTP client/server session tracking
* Find alternative to using pcap_loop() for processing packets


----------------------
VI. CREDITS/THANKS
----------------------

Thanks:
   Dug Song:                            whose tool /urlsnarf/ gave me some
   (http://monkey.org/~dugsong/dsniff/) great insights into how to properly
                                        parse HTTP packet contents

   Michal Zalewski:                       for the excellent program /p0f/ which
   (http://lcamtuf.coredump.cx/p0f.shtml) gave me inspiration for this project
                                          and an idea for the direction I'd like
                                          this code to eventually take
