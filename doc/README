      _     _   _
     | |   | | | |
     | |__ | |_| |_ _ __  _ __ _   _
     | '_ \| __| __| '_ \| '__| | | |
     | | | | |_| |_| |_) | |  | |_| |
     |_| |_|\__|\__| .__/|_|   \__, |
                   | |          __/ |
                   |_|         |___/

        -||-  HTTPry 0.0.6  -||-

  HTTP logging and information display tool


----------------------
I. ABOUT
----------------------

httpry is a tool designed for displaying and logging HTTP traffic. It is not
designed to perform analysis itself, but instead to capture, parse and log the
traffic for later analysis. It can be run in real-time displaying the traffic as
it is parsed, or as a daemon process that logs to an output file. It is written
to be as lightweight and flexible as possible, so that it can be adapted to many
different applications.

"How is this tool useful?" you may ask. Well, here's a few ideas that have
occurred to me:

 - Seeing what users on your network are looking at
 - Checking for proper server configuration (or even improper)
 - Researching patterns in HTTP usage
 - Checking for dangerous downloaded files
 - Verifying the enforcement of HTTP policy on your network
 - Simple curiosity
 - It's just plain fun to watch in realtime

Of course, I hope that others will find additional uses for the tool beyond what
I've imagined.


----------------------
II. INSTALLATION
----------------------

I was hoping you'd ask! Installing httpry is as simple as:

 $ make
 # make install

These commands will compile the latest version of the code and then install it
appropriately in /usr/sbin. Along with httpry itself, there are several other
tools included. These consist of a log rotation and log parsing script, and a
shell script to tie these together. These may either be useful as-is, or as a
starting point for your own tools. Additionally, there is an included rc file
for automatically starting the program under Linux. This file has only been
tested under Slackware Linux; your distro may handle things differently.
Finally, if you ever tire of httpry, simply run:

 # make uninstall

from your installation directory, or just manually delete the executable and man
page.


----------------------
III. USAGE
----------------------

Running the program with the -h switch will print out an abbreviated description
of the available options. However, this is merely an abbreviated description
meant for quick reference and not an understanding of program behavior. This
section describes these options in greater detail.

httpry [-dhp] [-c count] [-f file] [-i interface] [-l filter] [-o file] [-r dir]
       [-u user]

-c <count> :
Specifies a number of packets to capture, following which the
program will terminate. Note that this is a count of total captured packets, not
of parsed HTTP packets.

-d :
Runs the program as a daemon process. All program status output will be
sent to the syslog. Additionally, there is a pid file created for the process in
/var/run/httpry.pid. Requires -o.

-f <file> :
Provide an input capture file to read from instead of performing a
live capture. The program expects a valid capture file as input. Note that this
does not require the program to be run as root, as no access to the NIC is
required.

-h :
Displays the program name and version, along with a brief description of
these options.

-i <interface> :
Specifies an ethernet interface for the program to listen on.
This is optional; by default the program will poll the system for a list of
interfaces and select the first one that it finds.

-l <filter> :
Allows the default capture filter to be overridden by a filter
that follows the tcpdump format. Useful for capturing traffic on non-standard
ports or to/from specific hosts.

-o <file> :
Provides an output file for writing parsed packet data. Running the
program as a daemon without this option would be pretty useless and/or stupid.
Note that if the program is running as a daemon, its base directory is set to
the filesystem root so an absolute path to the output file should be specified.

-p :
Disables promiscuous mode on the NIC. Under most circumstances this should
not be required.

-r <dir> :
Allows a running directory to be specified when running in daemon mode. By default
this is set to '/', which should be adequate for most uses.

-u <user> :
Allows an alternate user to take ownership of the process. This is
particularly useful when running in daemon mode. Note that you still need root
privileges in order to run the program; it will switch to the alternate
credentials once initialization is complete.


----------------------
IV. KNOWN ISSUES
----------------------

There are no known issues with the program at this time. If you should run into
any problems or issues, please let me know.


----------------------
V. CHANGELOG
----------------------

version 0.0.6
   + Add: ability to change process owner (-u)
   + Add: additional error checking when entering daemon mode
   = Chg: completely reworked output data handling
   = Chg: removed stdout suppression (-s) option
   = Chg: daemon mode (-d) now requires output file (-o)
   = Chg: error/log/warn message printing pushed into function macros
   - Fix: standardized error and status message strings
   + Add: ability to specify running directory (-r)
   - Fix: fixed a potentially incorrect array initilization

version 0.0.5
   + Initial "official" release

All previous releases were internal pre-release builds


----------------------
VI. FUTURE IDEAS
----------------------

These are ideas that have occurred to me while working on this project as
potential ways to improve or extend the code. I'm still not convinced all of
them are necessarily good ideas, but they are a source of inspiration and
consideration as I continue working on the project. A number indicates the
program version number I'm targeting to focus on that particular option.

* Internal packet queue to help with burst traffic
* Parent/worker threaded design
* Ability to read settings from a config file (.7)
* Configurable subset of HTTP traffic to parse/output (.7)
* More extensive disassembly of the HTTP protocol (.7)
* Viewable packet capture statistics
* Option to fallback on rDNS when Host: unavailable
* HTTP client/server session tracking
* Option to dump raw packets that are logged


----------------------
VII. CREDITS/THANKS
----------------------

Thanks:
   p0f
   Dug Song
