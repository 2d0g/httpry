A number of Perl scripts are included with the project to provide a log
parsing framework. There is a central Perl script (parse_log.pl) that handles
all of the core log parsing duties, and a set of Perl plugins (plugins/*.pm)
that perform assorted processing duties. It is straightforward to create
custom plugins to extend the processing abilities.

*** IMPORTANT! ***
By default, the log parser will attempt to use all plugins that it finds in
the plugin directory. To override this behavior, use the -a and -i switches
to allow or ignore a comma-delimited list of plugins, respectively.
Additionally, any input log file needs to be a valid httpry log file,
including the field specifier at the start of the file.

The following Perl modules must be installed to run all included plugins:
        DBI

A summary of the included Perl scripts:

 ./scripts/rotate_log.pl
        Moves an active log file into a specified directory. Also offers
        options for deleting text files, compressing the log files and/or
        purging old log files according to number or total size.

 ./scripts/parse_log.pl
        Core script for plugins. Processes log files and delivers data to each
        initialized plugin. Plugins are utilized by having a .pm extension
        and being placed in the plugin directory (default is ./plugins). If
        a plugins directory is specified (-p), that is used instead. If
        no directory is specified, the script first searches the current
        directory for a plugin directory followed by the base directory of
        the script. The first directory found is used. If no directory is
        found, the script complains and exits. To customize the plugins that
        are loaded, either add/remove them from the plugin directory or use
        the -a or -i switch to provide a comma-delimited list of plugins to
        allow or ignore.

 ./scripts/plugins/client_flows.pm
        Breaks the input file into client flows which are time delimited
        blocks of traffic for each client IP. It is also able to search for
        specified content in the Host and Request-URI fields and flag flows
        accordingly. Because of the nature of its task, all server responses
        are discarded.

 ./scripts/plugins/db_dump.pm
        Dumps log file data into a previously prepared database. Useful
        for more extensive data mining or adding a more user-friendly web
        interface. Use the included db_dump.mysql to initialize the required
        database table.

 ./scripts/plugins/find_proxies.pm
        Performs some basic tests looking for proxy usage. The tests are
        currently rather rudimentary and quite a lot of noise is generated.

 ./scripts/plugins/hostnames.pm
        Outputs a list of unique hostnames found in the log data (rather
        pointless without 'host' as one of your output fields).

 ./scripts/plugins/log_summary.pm
        Provides extensive information regarding the input files including
        visited hosts, top talkers and file extensions, along with other
        assorted data. Useful for a high-level overview of the input files.

 ./scripts/plugins/sample_plugin.pm
        An example plugin with no functionality designed as an easy way to
        see how the plugins are structured and to provide a foundation for
        writing new plugins.

 ./scripts/plugins/search_terms.pm
        Outputs a raw dump of all entered search terms for a number of the
        major search services. It also calculates the average length of
        extracted search queries.

 ./scripts/plugins/xml_format.pm
        Outputs the input log data in XML format.
